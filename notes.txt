in routerLink, if "servers" or "./servers" or "../servers" is given. Then it's relative path ! PATH == It appends the path u give to the current path

in routerLink, if "/servers" is given. Then it's absolute path ! PATH == It removes the current path & overwrites the path entirely given in braces



RouterLinkActive directive analyzes ur current loaded path which links lead to the route which leads to the path 
and by default it marks a element as active if it adds the css class if it contains the path u are on or if this link 
is part of the path which is currently loaded.

routerLink="/" is for all paths. So to configure this, RouterLinkActiveOptions  directive is used.

Unlike routerLink, the navigate method doesn't know on which router it's currently working on.
ROuterlink always knows in which component's template it sets. So, it knows the currently set route it sits in.


Observables are a feature added by 3rd party package used by angular which allow u to easily work with async tasks . the params might change at some point of time in future
u dont when & if & how long will it take

The params subscription using rxjs doesn't need to be unsubscribed as angular does it automatically for us
regarding route Observables




In our example, we didn't encounter any issues when we tried to redirect the user. But that's not always the case when adding redirections.

By default, Angular matches paths by prefix. That means, that the following route will match both /recipes  and just / 

{ path: '', redirectTo: '/somewhere-else' } 

Actually, Angular will give you an error here, because that's a common gotcha: This route will now ALWAYS redirect you! Why?

Since the default matching strategy is "prefix" , Angular checks if the path you entered in the URL does start with the path specified in the route. Of course every path starts with ''  (Important: That's no whitespace, it's simply "nothing").

To fix this behavior, you need to change the matching strategy to "full" :

{ path: '', redirectTo: '/somewhere-else', pathMatch: 'full' } 

Now, you only get redirected, if the full path is ''  (so only if you got NO other content in your path in this example).



